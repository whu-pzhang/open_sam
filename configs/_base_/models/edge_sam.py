# model
data_preprocessor = dict(type='SamDataPreprocessor',
                         mean=[123.675, 116.28, 103.53],
                         std=[58.395, 57.12, 57.375],
                         bgr_to_rgb=True,
                         size=(1024, 1024))

checkpoint = 'weights/edge-sam-3x-5a3e3261.pth'  # noqa
model = dict(
    type='SAM',
    data_preprocessor=data_preprocessor,
    init_cfg=dict(type='Pretrained', checkpoint=checkpoint),
    image_encoder=dict(type='RepViT',
                       arch='m1',
                       img_size=1024,
                       out_channels=256,
                       frozen_stages=4),
    prompt_encoder=dict(type='PromptEncoder',
                        embed_dim=256,
                        image_embedding_size=(64, 64),
                        input_image_size=(1024, 1024),
                        mask_in_chans=16),
    mask_decoder=dict(type='MaskDecoder',
                      num_multimask_outputs=3,
                      transformer=dict(type='TwoWayTransformer',
                                       depth=2,
                                       embedding_dim=256,
                                       mlp_dim=2048,
                                       num_heads=8),
                      transformer_dim=256,
                      iou_head_depth=3,
                      iou_head_hidden_dim=256),
    loss_mask=dict(type='mmdet.FocalLoss',
                   use_sigmoid=True,
                   gamma=2.0,
                   alpha=0.25,
                   loss_weight=20.0),
    loss_dice=dict(type='mmdet.DiceLoss',
                   use_sigmoid=True,
                   activate=True,
                   reduction='mean',
                   naive_dice=True,
                   eps=1.0,
                   loss_weight=1.0),
    loss_iou=dict(type='mmdet.MSELoss', loss_weight=1.0),
    #
    train_cfg=dict(
        num_points=12544,
        oversample_ratio=3.0,
        importance_sample_ratio=0.75,
    ),
    test_cfg=dict(prompt_batch_size=32, mask_threshold=0.),
)
